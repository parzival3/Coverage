<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2020-11-13" filename="AluAccuChisel.v" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="12" lines-valid="12" package="/chiseluvm/chisel.AluAccuTester" testname="output.info" version="1.5">
<lines>
<line>
<code>module AluAccuChisel(</code>
</line>
<line hits="16003">
<code>  input         clock,</code>
<hit count="16003" name="verilator_coverage"/>
</line>
<line hits="2">
<code>  input         reset,</code>
<hit count="2" name="verilator_coverage"/>
</line>
<line hits="12004">
<code>  input  [2:0]  io_op,</code>
<hit count="12004" name="verilator_coverage"/>
</line>
<line hits="121114">
<code>  input  [31:0] io_din,</code>
<hit count="121114" name="verilator_coverage"/>
</line>
<line hits="2">
<code>  input         io_ena,</code>
<hit count="2" name="verilator_coverage"/>
</line>
<line hits="88272">
<code>  output [31:0] io_accu</code>
<hit count="88272" name="verilator_coverage"/>
</line>
<line>
<code>);</code>
</line>
<line>
<code>`ifdef RANDOMIZE_REG_INIT</code>
</line>
<line>
<code>  reg [31:0] _RAND_0;</code>
</line>
<line>
<code>`endif // RANDOMIZE_REG_INIT</code>
</line>
<line hits="88272">
<code>  reg [31:0] a; // @[AluAccuChisel.scala 18:24]</code>
<hit count="88272" name="verilator_coverage"/>
</line>
<line>
<code>  wire  _T = 3'h0 == io_op; // @[Conditional.scala 37:30]</code>
</line>
<line>
<code>  wire  _T_1 = 3'h1 == io_op; // @[Conditional.scala 37:30]</code>
</line>
<line>
<code>  wire [31:0] _res_T_1 = a + io_din; // @[AluAccuChisel.scala 30:16]</code>
</line>
<line>
<code>  wire  _T_2 = 3'h2 == io_op; // @[Conditional.scala 37:30]</code>
</line>
<line>
<code>  wire [31:0] _res_T_3 = a - io_din; // @[AluAccuChisel.scala 33:16]</code>
</line>
<line>
<code>  wire  _T_3 = 3'h3 == io_op; // @[Conditional.scala 37:30]</code>
</line>
<line>
<code>  wire [31:0] _res_T_4 = a &amp; io_din; // @[AluAccuChisel.scala 36:16]</code>
</line>
<line>
<code>  wire  _T_4 = 3'h4 == io_op; // @[Conditional.scala 37:30]</code>
</line>
<line>
<code>  wire [31:0] _res_T_5 = a | io_din; // @[AluAccuChisel.scala 39:16]</code>
</line>
<line>
<code>  wire  _T_5 = 3'h5 == io_op; // @[Conditional.scala 37:30]</code>
</line>
<line>
<code>  wire [31:0] _res_T_6 = a ^ io_din; // @[AluAccuChisel.scala 42:16]</code>
</line>
<line>
<code>  wire  _T_6 = 3'h7 == io_op; // @[Conditional.scala 37:30]</code>
</line>
<line>
<code>  wire  _T_7 = 3'h6 == io_op; // @[Conditional.scala 37:30]</code>
</line>
<line>
<code>  wire [31:0] _GEN_0 = _T_7 ? io_din : a; // @[Conditional.scala 39:67 AluAccuChisel.scala 48:11]</code>
</line>
<line>
<code>  wire [31:0] _GEN_1 = _T_6 ? {{1'd0}, a[31:1]} : _GEN_0; // @[Conditional.scala 39:67 AluAccuChisel.scala 45:11]</code>
</line>
<line>
<code>  wire [31:0] _GEN_2 = _T_5 ? _res_T_6 : _GEN_1; // @[Conditional.scala 39:67 AluAccuChisel.scala 42:11]</code>
</line>
<line>
<code>  wire [31:0] _GEN_3 = _T_4 ? _res_T_5 : _GEN_2; // @[Conditional.scala 39:67 AluAccuChisel.scala 39:11]</code>
</line>
<line>
<code>  wire [31:0] _GEN_4 = _T_3 ? _res_T_4 : _GEN_3; // @[Conditional.scala 39:67 AluAccuChisel.scala 36:11]</code>
</line>
<line>
<code>  wire [31:0] _GEN_5 = _T_2 ? _res_T_3 : _GEN_4; // @[Conditional.scala 39:67 AluAccuChisel.scala 33:11]</code>
</line>
<line>
<code>  assign io_accu = a; // @[AluAccuChisel.scala 56:11]</code>
</line>
<line>
<code>  always @(posedge clock) begin</code>
</line>
<line hits="1">
<code>    if (reset) begin // @[AluAccuChisel.scala 18:24]</code>
<hit count="1" name="verilator_coverage"/>
</line>
<line>
<code>      a &lt;= 32'h0; // @[AluAccuChisel.scala 18:24]</code>
</line>
<line hits="8000">
<code>    end else if (io_ena) begin // @[AluAccuChisel.scala 52:17]</code>
<hit count="8000" name="verilator_coverage"/>
</line>
<line hits="7500">
<code>      if (!(_T)) begin // @[Conditional.scala 40:58]</code>
<hit count="7500" name="verilator_coverage"/>
</line>
<line hits="500">
<code>        if (_T_1) begin // @[Conditional.scala 39:67]</code>
<hit count="500" name="verilator_coverage"/>
</line>
<line>
<code>          a &lt;= _res_T_1; // @[AluAccuChisel.scala 30:11]</code>
</line>
<line hits="7000">
<code>        end else begin</code>
<hit count="7000" name="verilator_coverage"/>
</line>
<line>
<code>          a &lt;= _GEN_5;</code>
</line>
<line>
<code>        end</code>
</line>
<line>
<code>      end</code>
</line>
<line>
<code>    end</code>
</line>
<line>
<code>  end</code>
</line>
<line>
<code>// Register and memory initialization</code>
</line>
<line>
<code>`ifdef RANDOMIZE_GARBAGE_ASSIGN</code>
</line>
<line>
<code>`define RANDOMIZE</code>
</line>
<line>
<code>`endif</code>
</line>
<line>
<code>`ifdef RANDOMIZE_INVALID_ASSIGN</code>
</line>
<line>
<code>`define RANDOMIZE</code>
</line>
<line>
<code>`endif</code>
</line>
<line>
<code>`ifdef RANDOMIZE_REG_INIT</code>
</line>
<line>
<code>`define RANDOMIZE</code>
</line>
<line>
<code>`endif</code>
</line>
<line>
<code>`ifdef RANDOMIZE_MEM_INIT</code>
</line>
<line>
<code>`define RANDOMIZE</code>
</line>
<line>
<code>`endif</code>
</line>
<line>
<code>`ifndef RANDOM</code>
</line>
<line>
<code>`define RANDOM $random</code>
</line>
<line>
<code>`endif</code>
</line>
<line>
<code>`ifdef RANDOMIZE_MEM_INIT</code>
</line>
<line>
<code>  integer initvar;</code>
</line>
<line>
<code>`endif</code>
</line>
<line>
<code>`ifndef SYNTHESIS</code>
</line>
<line>
<code>`ifdef FIRRTL_BEFORE_INITIAL</code>
</line>
<line>
<code>`FIRRTL_BEFORE_INITIAL</code>
</line>
<line>
<code>`endif</code>
</line>
<line>
<code>initial begin</code>
</line>
<line>
<code>  `ifdef RANDOMIZE</code>
</line>
<line>
<code>    `ifdef INIT_RANDOM</code>
</line>
<line>
<code>      `INIT_RANDOM</code>
</line>
<line>
<code>    `endif</code>
</line>
<line>
<code>    `ifndef VERILATOR</code>
</line>
<line>
<code>      `ifdef RANDOMIZE_DELAY</code>
</line>
<line>
<code>        #`RANDOMIZE_DELAY begin end</code>
</line>
<line>
<code>      `else</code>
</line>
<line>
<code>        #0.002 begin end</code>
</line>
<line>
<code>      `endif</code>
</line>
<line>
<code>    `endif</code>
</line>
<line>
<code>`ifdef RANDOMIZE_REG_INIT</code>
</line>
<line>
<code>  _RAND_0 = {1{`RANDOM}};</code>
</line>
<line>
<code>  a = _RAND_0[31:0];</code>
</line>
<line>
<code>`endif // RANDOMIZE_REG_INIT</code>
</line>
<line>
<code>  `endif // RANDOMIZE</code>
</line>
<line>
<code>end // initial</code>
</line>
<line>
<code>`ifdef FIRRTL_AFTER_INITIAL</code>
</line>
<line>
<code>`FIRRTL_AFTER_INITIAL</code>
</line>
<line>
<code>`endif</code>
</line>
<line>
<code>`endif // SYNTHESIS</code>
</line>
<line>
<code>endmodule</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
